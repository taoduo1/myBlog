并发（concurrent）
同一时间应对多件事情的能力就是并发，是由操作系统的 任务调度器调度器 执行的
单核的系统 由任务调度器分配时间给各个线程，各个线程串行执行指令 任务调度器分配的最小时间为15毫秒，人类无法感知
并行(parallel)
同时执行多个任务，就是并行

jconsole 远程查看线程运行.

线程的程序计数器：每个线程私有，记录进行到哪行代码

start和run的区别
start方法，启动线程，但是线程并不会立即执行，具体执行时间要看操作系统的任务调度器
run方法，立即执行该方法，执行的线程由调用run方法线程决定，调用run并不会使用多线程，就是一个方法调用

两阶段终止模式

再一个线程中，优雅的终止另个一个线程
线程启用后，调用线程的打断方法，并加入sleep 在sleep的try catch中继续打断 
打断加打断


线程的五种状态
初始状态
new 了一个线程对象，但是还未调用start()方法
就绪状态 ：可以被操作系统的任务调度器调度
运行状态： 正在运行代码的状态
阻塞状态：调用了一些阻塞api，使线程阻塞 如读取文件等
终止状态： 运行完成后的线程状态

六种状态
new，与初始状态相同
new ---> runnable ，涵盖了操作系统的可运行，运行，阻塞状态， 
	调用t.start()方法由new ---> runnable 
runnable <---> blocked: 阻塞状态
	线程获取锁失败时，进入blocked
runnable <---> waiting：阻塞状态 
	1)
	线程使用 synchronized获取了对象锁后
	调用wait()方法，线程由runnable ---> waiting
	调用 notify(),notifyAll(),interrupt()时，
	竞争锁成功 waiting ---> waiting
	竞争锁失败 waiting ---> blocked
	2)
	线程调用join()方法时，线程由 runnable ---> waiting
	调用 notify(),notifyAll(),interrupt()时，waiting ---> runnable
	
timed_waiting：阻塞状态 
	调用有时间限制的wait()或 sleep()等带有时间限制的方法时runnable ---> timed_waiting
terminated 终止状态
	线程运行结束时 runnable ---> terminated



共享模型

synchronized 加载方法上，锁的是this对象 
成员变量和静态变量在有读写操作时，有可能线程不安全
局部变量如果是引用变量则有可能导致线程不安全

闭合原则： 不想对外暴露的，可以设置为final 或private

java对象头

由 mark word 和 klass word 组成 数组对象还有array length （32位，用于存储数组长度）
mark word中存储了对象的hasCode 、 对象标记（gc用于标记对象处于什么代，亲年代/老年代等）、是否启用偏向锁，锁状态

monitor（锁）由操作系统提供 每个monitor对应一个对象
属性： 
waitset
entryList 阻塞队列，等待其他线程释放owner所有权 底层是一个链表结构
Owner 当前锁中正在执行的线程

线程上锁过程

代码执行到synchronized 区域时，
获取对象地址，并复制（解锁用）
将对象的头存储至锁中
对象被锁时，对象头中的mark word后两位会改变状态并且会将对象的哈希值修改为锁的指针地址
修改monitor对象的属性owner为当前执行线程
线程内代码执行完后，释放锁（根据对象地址找到锁，并将锁中存储的对象头信息还原至对象头中，并重置锁）
唤醒等待线程，线程开始重新开始竞争（非公平竞争，竞争由JDK底层实现）
执行完代码的线程在不进入锁时会进入waitset

synchronized 中如果发生异常，会再次将锁重置（将锁中的对象信息还原至对象中，并唤醒entrySet）


synchronized java6之后对其进行改进
轻量级锁：锁记录中锁的状态为00 ，是jvm假设一般不会发生线程竞争，发生竞争时，才会使用monitor
轻量级锁在锁重入（同一个对象多次加锁）时，会进行多次cas操作（创建一个栈幁，把对象头存起来）
自旋锁优化：在monitor 竞争时，自旋优化。java6之后，自旋锁是自适应的，比较智能 java7之后不能控制是否开启自旋，并只有多核CPU才会发挥优势

偏向锁(当偏向锁达到一定阈值时，会设置不可偏向)
第一次加锁时
会将线程id存入对象的mark word中，以后只要不发生竞争，就会一直被这个线程使用
默认是延迟的，不会再程序启动后立即生效


cas：将对象头中的信息，替换为锁记录中的信息


锁消除：java代码在JIT(即时编译器) 如果一些代码在运行时，不会触发锁，就会把锁消除掉

wait notify 方法
wait 会将线程放入waitList中，线程进入等待状态
notify或者是notify All 会将 waitList 中的线程从等待状态唤醒，进入entryList中
wait方法有两种，一种无时限的，一种有时限的
notify 唤醒只能随机唤醒一个线程，有可能会唤醒错误的等待线程
正确使用wait notify
synchronized(lock){
	while（条件不成立）{
	lock.wait();
	}
}
synchronized(lock){
	lock.notifyAll();
}


保护性暂停模式（guarded suspension） 归类于同步模式
场景： 一个线程在等待另一个线程的执行结果时
线程1 需要等待结果
线程2 产生结果
加入中间对象来充当桥梁 
jdk中join、future的实现采用的就是这个模式

好处：比较join，join必须等一个线程执行结束

join原理：保护性暂停模式实现
还是使用wait方法

生产者消费者模式 归类于异步模式
充当桥梁的对象是一个消息队列
结果产生者不需要和结果消费者一一对应
jdk中各种阻塞队列，采用的就是这种模式



LockSupport 的park 和unpark方法

是以线程为单位，进行阻塞和唤醒 而notify只能随机唤醒
每个线程都有自己的一个parker对象
有三个属性_mutex ,（线程阻塞队列）
_cond ,
_counter
调用park方法时，回去看_counter ==0，如果_counter 满足条件，线程就会继续执行，如果不满足条件，就会暂停
调用unpark方法时，回去看_counter ==1 线程是否暂停，如果暂停，就会启动线程，如果线程正在运行，就还是 

线程活跃性
死锁，
	两个线程各自持有一把锁，并想获取对方的锁
定位死锁：jconsole，jstack（jps查找进程，jstack 进程号）
解决方式：顺序加锁
线程A获得锁A。阻塞线程2获得锁B
线程A继续获得锁B，执行完成后释放锁
线程B获得锁A。阻塞线程2获得锁B
线程B继续获得锁B，执行完成后释放锁
活锁，
	两个线程互相在改变对方的结束条件
	解决方式：交错执行顺序
饥饿
一个线程优先级太低，始终得不到cpu的调度执行

可重入锁(一个对象可多次加锁)
ReentrantLock 属于joc并发工具包
相比于synchronized有以下特点
可中断
可以设置超时时间 （一段时间获取不到锁就会放弃锁执行其他逻辑）
可以设置为公平锁 （可以防止线程饥饿） 
默认是不公平的，
支持多个条件变量 （支持多个waitSet，可以在多个等待区等待）
基本语法：
ReentrantLock reentrantLock = new ReentrantLock();
reentrantLock.lock();
try{
	//临界区
}finally{
	//释放锁
	reentrantLock.lock();
}
可重入是指同一个线程如果首次获得了这把锁，那么它就成为了这把锁的拥有者，因此有权利再次获得这把锁
如果是不可重入锁，那么第二次获得锁时，自己也会被锁住

同步模式--顺序控制
一个线程先打印2 再打印1


犹豫模式 balking
执行某件事的时候已经发现别人已经做了，就不做了




